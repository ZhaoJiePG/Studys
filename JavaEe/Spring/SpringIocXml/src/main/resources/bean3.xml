<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给spring来创建-->
    <!--spring中的依赖注入
        依赖注入：
            Dependency Injection
        IOC的作用：
            降低程序之间的耦合(依赖关系)
        依赖关系的管理：
            以后都交给spring来维护
        在当前类需要用到其他类的对象，由spring为我们来提供，只需要在配置文件中生命
        依赖关系的维护
            就称为依赖注入有三类：
                基本类和String
                其他bean类型(在配置文件中或者注解)
                复杂类型/集合类型
            注入方式：有三种
                第一种：由构造函数提供
                第二种：使用set方法提供
                第三种：使用注解提供
    -->

    <!--构造函数注入
        使用额标签：constructor-arg
        标签出现的位置：bean标签的内部
        标签中的属性:
            type：用于指定需注入的数据类型，该数据的类型也是构造函数中某些参数的类型
            index：用于指定要注入的数据给构造函数中指定的索引位置
            name：用于指定给构造函数中指定名称的参数赋值（最常用）
            ==============================================
            value：用于提供基本类型和STring类型
            ref：用于指定其他的bean类型的数据：在spring的ioc中出现过的bean对象
        优势：
            在获取bean对象时：注入数据是必须的操作，否则对象无法创建成功
        弊端：
            必须安装规定保留创建方式
    -->
    <bean id="accountService" class="com.yadea.zj.service.impl.AccountServiceImpl3">
        <constructor-arg  name="name" value="zj" />
        <constructor-arg  name="age" value="18" />
        <constructor-arg  name="birthday" ref="now" />
    </bean>

    <!--配置一个日期对象    -->
    <bean id="now" class="java.util.Date"></bean>

    <!-- set方法注入                更常用的方式
       涉及的标签：property
       出现的位置：bean标签的内部
       标签的属性
           name：用于指定注入时所调用的set方法名称
           value：用于提供基本类型和String类型的数据
           ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象
       优势：
           创建对象时没有明确的限制，可以直接使用默认构造函数
       弊端：
           如果有某个成员必须有值，则获取对象是有可能set方法没有执行。
   -->
    <bean id="accountService2" class="com.yadea.zj.service.impl.AccountServiceImpl4">
        <property name="name" value="TEST" ></property>
        <property name="age" value="21"></property>
        <property name="birthday" ref="now"></property>
    </bean>

    <!-- 复杂类型的注入/集合类型的注入
        用于给List结构集合注入的标签：
            list array set
        用于个Map结构集合注入的标签:
            map  props
        结构相同，标签可以互换
    -->
    <bean id="accountService3" class="com.yadea.zj.service.impl.AccountServiceImpl5">
    <property name="myStrs">
        <set>
            <value>AAA</value>
            <value>BBB</value>
            <value>CCC</value>
        </set>
    </property>

    <property name="myList">
        <array>
            <value>AAA</value>
            <value>BBB</value>
            <value>CCC</value>
        </array>
    </property>

    <property name="mySet">
        <list>
            <value>AAA</value>
            <value>BBB</value>
            <value>CCC</value>
        </list>
    </property>

    <property name="myMap">
        <props>
            <prop key="testC">ccc</prop>
            <prop key="testD">ddd</prop>
        </props>
    </property>

    <property name="myProps">
        <map>
            <entry key="testA" value="aaa"></entry>
            <entry key="testB">
                <value>BBB</value>
            </entry>
        </map>
    </property>
    </bean>
</beans>

