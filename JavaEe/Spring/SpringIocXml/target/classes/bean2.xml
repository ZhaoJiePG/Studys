<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给spring来创建-->
    <!--
        spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->

    <!--1.创建bean的三种方式-->
    <!--第一种：使用默认构造函数创建
        在spring的配置文件中使用bean标签，配以id和class属性后，且没有其他属性标签时。
        采用的是默认构造器创建bean对象，此时如果类中没有默认构造函数，则无法创建对象
    -->
    <bean id="accountService" class="com.yadea.zj.service.impl.AccountServiceImpl" scope="prototype"
          init-method="init" destroy-method="distory"></bean>

    <!--第二种：使用普通工厂中的方法创建对象(使用某个类中的方法创建对象并存入spring容器)
    -->
<!--    <bean id="instanceFactory" class="com.zj.factory.InstanceFactory"></bean>-->
<!--    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>-->

    <!--第三种：使用某个类中的静态方法创建对象并存入spring容器
    -->
<!--    <bean id="accountService" class="com.zj.factory.staticFactory" factory-method="getAccountService"></bean>-->

    <!--bean的作用范围调整
        bean标签的scope标签属性：
            singleton:单列的
            prototype:多列的
            request:作用于web应用请求范围
            session:作用于web应用会话范围
            global-session:作用于集群环境的会话范围，不是集群模式时就是session
    -->

    <!--bean对象的生命周期
        单列对象：生命周期和容器相同
            出生：当容器创建时
            活着：只有容器还在
            死亡：容器销毁

        多例对象
            出生:使用spring框架时一直有
            活着：对象在使用过程中
            死亡：java垃圾回收器回收
    -->
</beans>