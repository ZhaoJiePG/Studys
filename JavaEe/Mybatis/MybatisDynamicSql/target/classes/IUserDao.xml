<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="utils.IUserDao1">
    <!-- 配置 查询结果的列名和实体类的属性名的对应关系 -->
    <resultMap id="userMap" type="domain.User">
        <!-- 主键字段的对应 -->
        <id property="userId" column="id"></id>
        <!--非主键字段的对应-->
        <result property="userName" column="username"></result>
        <result property="userAddress" column="address"></result>
        <result property="userSex" column="sex"></result>
        <result property="userBirthday" column="birthday"></result>
        <!--配置user对象中的accounts的映射-->
        <collection property="accounts" ofType="domain.Account">
            <id column="aid" property="id" ></id>
            <result property="uid" column="uid"></result>
            <result property="money" column="money"></result>
        </collection>
    </resultMap>

    <!--指定sql-->
    <sql id="defaultUser">
        select * from user
    </sql>

    <!-- 查询所有 -->
    <select id="findAll" resultMap="userMap">
        select * from user u left outer join account a on u.id=a.uid
    </select>

    <!-- 根据id查询用户 -->
    <select id="findUserById" parameterType="INT" resultMap="userMap">
        select * from user where id = #{uid}
    </select>

    <!-- 根据名称模糊查询 -->
    <select id="findUserByName" parameterType="string" resultMap="userMap">
        select * from user where username like #{userName}
        <!-- select * from user where username like '%${value}%'-->
    </select>

    <!-- 根据queryVo的条件查询用户 -->
    <select id="findUserByVo" parameterType="domain.QueryVo" resultMap="userMap">
        select * from user where username like #{user.userName}
    </select>

    <!-- 根据动态的条件查询用户 -->
    <select id="findUserByCondition" parameterType="domain.User" resultMap="userMap">
        select * from user
<!--       where 1=1-->
<!--        <if test="userName !=null">-->
<!--            and username = #{userName}-->
<!--        </if>-->
<!--        <if test="userSex !=null">-->
<!--            and sex = #{userSex}-->
<!--        </if>-->
        <where>
            <if test="userName !=null">
                and username = #{userName}
            </if>
            <if test="userSex !=null">
                and sex = #{userSex}
            </if>
        </where>
    </select>

    <!-- 更具Queryvo中的id集合查询中的条件查询用户 -->
    <select id="findUserInIds" parameterType="domain.QueryVo" resultMap="userMap">
        <include refid="defaultUser"></include>
        <where>
            <if test="ids != null and ids.size>0">
                <foreach collection="ids" open="and id in (" close=")" item="id" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>
</mapper>