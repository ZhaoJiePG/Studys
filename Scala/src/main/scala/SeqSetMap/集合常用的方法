map, flatten, flatMap, filter, sorted, sortBy, sortWith, grouped, fold(折叠),
foldLeft, foldRight, reduce, reduceLeft, aggregate, union, intersect(交集),
diff(差集), head, tail, zip, mkString, foreach, length, slice, sum

scala> val list=List(1,2,3,4,5)
list: List[Int] = List(1, 2, 3, 4, 5)

scala> list.map(x=>x*2)
res0: List[Int] = List(2, 4, 6, 8, 10)

scala> list.sortBy(x=> -x)
res5: List[Int] = List(5, 4, 3, 2, 1)

scala> val words=List(("a",3),("b",5),("c",2))
words: List[(String, Int)] = List((a,3), (b,5), (c,2))

scala> words.sortBy(t=> t._2)
res6: List[(String, Int)] = List((c,2), (a,3), (b,5))

scala> words.sortWith((x,y)=>x._2>y._2)
res7: List[(String, Int)] = List((b,5), (a,3), (c,2))

scala> list.grouped(2).toList
res10: List[List[Int]] = List(List(1, 2), List(3, 4), List(5))

scala> list
res13: List[Int] = List(1, 2, 3, 4, 5)

scala> list.fold(0)((x,y)=>x+y)
res14: Int = 15

scala> list.fold(0)(_+_)
res15: Int = 15

scala> list.foldLeft(2)(_ - _)
res18: Int = -13

scala> list.foldRight(2)(_ - _)
res19: Int = 1

scala> list.reduce((x,y)=> x+y)
res20: Int = 15

scala> list.aggregate(0)(_ + _,_ + _)
res21: Int = 15

scala> val list=List(1,2,3,4,5)
list: List[Int] = List(1, 2, 3, 4, 5)

scala> val list2=List(1,3,5,7,8)
list2: List[Int] = List(1, 3, 5, 7, 8)

scala> list.union(list2)
res0: List[Int] = List(1, 2, 3, 4, 5, 1, 3, 5, 7, 8)

scala> list.intersect(list2)
res1: List[Int] = List(1, 3, 5)

scala> list.diff(list2)
res2: List[Int] = List(2, 4)

scala> list.head
res3: Int = 1

scala> list.tail
res4: List[Int] = List(2, 3, 4, 5)

scala> list.zip(list2)
res5: List[(Int, Int)] = List((1,1), (2,3), (3,5), (4,7), (5,8))

scala> list.mkString("|")
res7: String = 1|2|3|4|5

scala> list.foreach(print)
12345

scala> list.length
res11: Int = 5

scala> list.slice(1,3)
res12: List[Int] = List(2, 3)

scala> list.sum
res14: Int = 15
