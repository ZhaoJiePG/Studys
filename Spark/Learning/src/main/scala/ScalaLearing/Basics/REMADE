一  基础语法
Scala语言是基于Java虚拟机运行的，所以基本的语法和Java是没有区别的。但是为了简化Java的开发以及融合其他的编程语言的优点和特性，Scala在基本的语法上做了大量的修改和优化，让程序员开发起来更简单，方便，灵活。
1.1	标识符
Scala中的标识符声明，基本和Java是一致的，但是细节上会有所变化。
	首字符为字母，后续字符任意字母和数字，美元符号，可后接下划线_
	首字符为操作符，后续字符为任意操作符
	用反引号`....`包括的任意字符串，即使是关键字也可以
	Scala中有些保留字，不能用作标识符，但是反引号括起除外，如yield在Scala中就是保留字
1.2	变量
Scala声明变量有两种方式，一个用val，一个用var。
val / var 变量名 : 变量类型 = 变量值。
val定义的值是不可变的，它不是一个常量，是不可变量，或称之为只读变量。
val示例：
scala> val a1 = 10
scala> a1 = 20（X）
var示例：
scala> var a2 = 10
scala> a2 = 20（OK）
1.3	常用类型
Scala语言是完全面向对象的语言，所以并不区分基本类型和引用类型，这些类型都是对象，我们称之为常用类型。
Scala常用类型中包含有7种数值类型：Byte、Char、Short、Int、Long、Float、Double及Boolean类型，还有String类型。
Boolean	true 或者 false
Byte	8位, 有符号
Short	16位, 有符号
Int	32位, 有符号
Long	64位, 有符号
Char	16位, 无符号
Float	32位, 单精度浮点数
Double	64位, 双精度浮点数
String	其实就是由Char数组组成
注：既然Java的基本类型数据在Scala中都是对象，那么也就意味着Java中基本类型的数据在Scala中都是可以调用对象方法的。
scala> 1.toString
相对于java的类型系统，scala无疑要复杂的多!也正是这复杂多变的类型系统才让面向对象编程和函数式编程完美的融合在了一起！
Scala中，所有的值都是类对象，而所有的类，包括值类型，都最终继承自一个统一的根类型Any。统一类型，是Scala的又一大特点。更特别的是，Scala中还定义了几个底层类（Bottom Class），比如Null和Nothing。
1)	Null是所有引用类型的子类型，而Nothing是所有类型的子类型。Null类只有一个实例对象，null，类似于Java中的null引用。null可以赋值给任意引用类型，但是不能赋值给值类型。
2)	Nothing，可以作为没有正常返回值的方法的返回类型，非常直观的告诉你这个方法不会正常返回，而且由于Nothing是其他任意类型的子类，他还能跟要求返回值的方法兼容。
3)	Unit类型用来标识过程，也就是没有明确返回值的函数。 由此可见，Unit类似于Java里的void。Unit只有一个实例，()，这个实例也没有实质的意义。

1.4	算数操作符重载
+-*/%可以完成和Java中相同的工作，但是有一点区别，Scala是完全面向对象语言，所以所有的运算符都是对象的运算行为，也就是所谓的对象方法。
举例：
scala> 1 + 2
等同于：
scala> 1.+(2)
注：Scala中没有++、--操作符，需要通过+=、-=来实现同样的效果。
1.5	调用函数和方法
在scala中，一般情况下我们不会刻意的去区分函数与方法的区别，但是他们确实是不同的东西。
1) 调用函数，求方根
scala> import scala.math._
scala> sqrt(100)

2) 调用方法，静态方法（scala中没有静态方法这个概念，需要通过类的伴生对象来实现）
scala> BigInt.probablePrime(16, scala.util.Random)
3) 调用方法，非静态方法，使用对象调用
scala> "HelloWorld".distinct


二  控制结构
Scala语言中控制结构和Java语言中的控制结构基本相同，在不考虑特殊应用场景的情况下，代码书写方式以及理解方式都没有太大的区别
2.1 if else表达式
var sumVal = 0
if ( sumVal == 0 ) {
    println("true")
} else {
    println("false")
}
注：如果大括号内的逻辑代码只有一行，大括号可以省略
注：Scala中任意表达式都是有返回值的，也就意味着if else表达式其实是有返回结果的，具体返回结果的值取决于满足条件的代码体的最后一行内容
var result = if ( sumVal == 0 ) {
    println("true") // 此处为满足条件逻辑的最后一行内容，打印语句是没有返回值的
} else {
    "false" //此处为不满足条件逻辑的最后一行内容，此处返回值为字符串String
}
因为Scala在编译期间无法知道程序的逻辑是满足或不满足，所以无法推断出result变量的具体类型，所以就设定为Any类型（所有类型的公共超类型）



如果缺少一个判断，什么都没有返回，但是Scala认为任何表达式都会有值，对于空值，使用Unit类，叫做无用占位符，相当于java中的void, 打印结果为()，
val result =
  if(sumVal > 20){
    "结果大于20"
  }
println(result)
Java中表达式是没有值的，所以为了弥补这样的缺陷，就出现了三元运算符，但是Scala中是没有的，因为根本不需要。
// Java
int result = flg ? 1 : 0
// Scala
val result = if (flg) 1 else 0
2.2 while表达式
1) while循环
Scala提供和Java一样的while和do循环，与If语句不同，While语句本身没有值，即整个While语句的结果是Unit类型的()。
var n = 1;
val while1 = while(n <= 10){
  n += 1
}
println(while1)
println(n)
注：因为while和do…while中没有返回值,所以当要用该语句来计算并返回结果时,就不可避免的使用变量 ，而变量需要声明在while循环的外部，那么就等同于循环的内部对外部的变量造成了影响， 也就违背了函数式编程的重要思想，所以不推荐使用。
2) while循环的中断
Scala内置控制结构特地去掉了break和continue，是为了更好的适应函数化编程，
推荐使用函数式的风格解决break和contine的功能，而不是一个关键字。
import util.control.Breaks._
breakable{
  while(n <= 20){
    n += 1;
    if(n == 18){
      break()
    }
  }
}
2.3 for表达式
Scala 也为for 循环这一常见的控制结构提供了非常多的特性，这些for 循环的特性被称为for 推导式（for comprehension）或for 表达式（for expression）。
1) 范围数据循环1：to左右两边为前闭后闭的访问
for(i <- 1 to 3){
  print(i + " ")
}
println()
2) 范围数据循环2：until左右两边为前闭后开的访问
for(i <- 1 until 3) {
  print(i + " ")
}
println()
3) 循环守卫：引入循环保护式（也称条件判断式，守卫）。保护式为true则进入循环体内部，为false则跳过，类似于continue
for(i <- 1 to 3 if i != 2) {
  print(i + " ")
}
println()
4) 引入变量：
for(i <- 1 to 3; j = 4 - i) {
  print(j + " ")
}
5) 嵌套循环：
for(i <- 1 to 3; j <- 1 to 3) {
  print(i*j + " ")
}
6) 循环返回值：（将遍历过程中处理的结果返回到一个新集合中，使用yield关键字）
val for5 = for(i <- 1 to 10) yield i
println(for5)
7) 使用花括号{}代替小括号()：
for{
  i <- 1 to 3
  j = 4 - i}
  print(i * j + " ")
注：{}和()对于for表达式来说都可以。for 推导式有一个不成文的约定：当for 推导式仅包含单一表达式时使用原括号，当其包含多个表达式时使用大括号。值得注意的是，使用原括号时，早前版本的Scala 要求表达式之间必须使用分号。

三  函数
scala定义函数的标准格式为：
def 函数名(参数名1: 参数类型1, 参数名2: 参数类型2) : 返回类型 = {函数体}
	1) 函数有返回值：
def f1() : String= {
  return "f1"
}
	注：Scala中的函数可以根据函数体最后一行代码自行推断函数返回值类型。那么在这种情况下，return关键字可以省略，既然Scala可以自行推断，所以在省略return关键字的场合，返回值类型也可以省略。
如果函数明确使用return关键字，那么函数无法省略返回值类型。
	2) 函数无返回值
def f2() ：Unit = {
  println("f2")
}
	注：如果函数明确声明无返回值（声明Unit），那么函数体中即使使用return关键字也不会有返回值。
如果明确函数无返回值或不确定返回值类型，那么返回值类型可以省略
def f3(s: String) = {
  if(s.length >= 3)
    s + "123"
  else
    3
}
	3)函数有参数：
def f4(p: String) = {
  println(p)
}
注：函数如果参数列表不为空，那么在调用时需要传递参数，不能省略，这和JavaScript语法不一样，在JavaScript中调用有参函数时，如果没有传递参数，那么参数会自动赋值为undefined,  Scala也可以实现类似的功能，就是在声明参数时，直接赋初始值。
def f5(p:String = "f5") {
    println(p);
}
	调用函数时，如果不传递参数，就采用默认的初始值，如果传递参数，传递的参数会覆盖初始化。
f5() // 不传参数，打印f5
f5("function") // 传参, 覆盖默认值，打印function
如果函数存在多个参数，每一个参数都可以设定默认值，那么这个时候，传递的参数到底是覆盖默认值，还是赋值给没有默认值的参数，就不确定了(默认按照声明顺序)。在这种情况下，可以采用带名参数
def f6 ( p1 : String = "v1", p2 : String ) {
    println(p1 + p2);
}
f6("v2" )  // (X)
f6(p2="v2") // (OK)
4)变长参数（不确定个数参数，类似Java的...）
def f7(args: Int*) = {
  var result = 0
  for(arg <- args)
    result += arg
  result
}
5) 递归函数
// 递归函数未执行之前是无法推断出来结果类型，在使用时必须有明确的返回值类型
def f8(n: Int): Int = {
  if(n <= 0)
    1
  else
    n * f8(n - 1)
}
6) 过程：将函数的返回类型为Unit的函数称之为过程。如果明确函数没有返回值，那么等号可以省略
def f9(content: String) = {
  println(“f7”)
}
def f9(content: String) { // 明确无返回值
  println(content)
}
注：开发工具的自动代码补全功能，虽然会自动加上Unit，但是考虑到Scala语言的简单，灵活，能不加最好不加
7) 惰性函数：当函数返回值被声明为lazy时，函数的执行将被推迟，直到我们首次对此取值。这种函数我们称之为惰性函数，在Java的某些框架代码中称之为懒加载（延迟加载）
  def f10(): String = {
    println("f10方法执行")
  }
  lazy val msg = f10()
  println("f10方法没有执行")
  println(msg)

四  异常
	Scala提供try和catch块来处理异常。try块用于包含可疑代码。catch块用于处理try块中发生的异常。可以根据需要在程序中有任意数量的try...catch块。
	语法处理上和Java类似，但是又不尽相同。
// Java
try {
   // 可疑代码
   int I = 0;
   int b = 10;
   int c = b / i; // 执行代码时，会抛出ArithmeticException异常
} catch(Exception e)  {
   e.printStackTrace();
}finally {
   // 最终要执行的代码
}
// Scala
try {
    val r = 10 / 0
} catch {
    case ex: ArithmeticException=> println("捕获了除数为零的算数异常")
    case ex: Exception => println("捕获了异常")
} finally {
    // 最终要执行的代码
}
1)	我们将可疑代码封装在try块中。 在try块之后使用了一个catch处理程序来捕获异常。如果发生任何异常，catch处理程序将处理它，程序将不会异常终止。
2)	Scala的异常的工作机制和Java一样，但是Scala没有“checked”异常，你不需要声明说函数或者方法可能会抛出某种异常。受检异常在编译器被检查，java必须声明方法所会抛出的异常类型。
3)	用throw关键字，抛出一个异常对象。所有异常都是Throwable的子类型。throw表达式是有类型的，就是Nothing，因为Nothing是所有类型的子类型，所以throw表达式可以用在需要类型的地方。
4)	在Scala里，借用了模式匹配的思想来做异常的匹配，因此，在catch的代码里，是一系列case子句。
5)	异常捕捉的机制与其他语言中一样，如果有异常发生，catch字句是按次序捕捉的。因此，在catch字句中，越具体的异常越要靠前，越普遍的异常越靠后。 如果抛出的异常不在catch字句中，该异常则无法处理，会被升级到调用者处。
6)	finally字句用于执行不管是正常处理还是有异常发生时都需要执行的步骤，一般用于对象的清理工作。
7)	Scala提供了throws关键字来声明异常。可以使用方法定义声明异常。 它向调用者函数提供了此方法可能引发此异常的信息。 它有助于调用函数处理并将该代码包含在try-catch块中，以避免程序异常终止。在scala中，可以使用throws注释来声明异常。
@throws(classOf[NumberFormatException])
def f11()  = {
"abc".toInt
}

